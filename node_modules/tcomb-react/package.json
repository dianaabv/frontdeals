{
  "_args": [
    [
      {
        "raw": "tcomb-react@^0.9.0",
        "scope": null,
        "escapedName": "tcomb-react",
        "name": "tcomb-react",
        "rawSpec": "^0.9.0",
        "spec": ">=0.9.0 <0.10.0",
        "type": "range"
      },
      "/home/diana/Desktop/frontdeals/node_modules/rc-datepicker"
    ]
  ],
  "_from": "tcomb-react@>=0.9.0 <0.10.0",
  "_id": "tcomb-react@0.9.3",
  "_inCache": true,
  "_location": "/tcomb-react",
  "_nodeVersion": "5.5.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/tcomb-react-0.9.3.tgz_1472546547540_0.38150692195631564"
  },
  "_npmUser": {
    "name": "gcanti",
    "email": "giulio.canti@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tcomb-react@^0.9.0",
    "scope": null,
    "escapedName": "tcomb-react",
    "name": "tcomb-react",
    "rawSpec": "^0.9.0",
    "spec": ">=0.9.0 <0.10.0",
    "type": "range"
  },
  "_requiredBy": [
    "/rc-datepicker",
    "/react-flexview"
  ],
  "_resolved": "https://registry.npmjs.org/tcomb-react/-/tcomb-react-0.9.3.tgz",
  "_shasum": "44713e1d2e8c2ff744b8ed6579bf77aed23b0efc",
  "_shrinkwrap": null,
  "_spec": "tcomb-react@^0.9.0",
  "_where": "/home/diana/Desktop/frontdeals/node_modules/rc-datepicker",
  "author": {
    "name": "Giulio Canti",
    "email": "giulio.canti@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gcanti/tcomb-react/issues"
  },
  "dependencies": {
    "doctrine": "0.7.2",
    "get-comments": "1.0.1",
    "react": ">=0.13.0",
    "tcomb-doc": "^0.5.0",
    "tcomb-validation": "^3.0.0"
  },
  "description": "Type checking for React components",
  "devDependencies": {
    "babel": "5.8.34",
    "babel-core": "5.8.34",
    "babel-eslint": "3.1.30",
    "babel-runtime": "5.8.34",
    "eslint": "^3.4.0",
    "mocha": "2.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "44713e1d2e8c2ff744b8ed6579bf77aed23b0efc",
    "tarball": "https://registry.npmjs.org/tcomb-react/-/tcomb-react-0.9.3.tgz"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "gitHead": "49c3858e48f6c5f3304221fc2199a90fd91b363b",
  "homepage": "https://github.com/gcanti/tcomb-react",
  "keywords": [
    "tcomb",
    "react",
    "react-component"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "gcanti",
      "email": "giulio.canti@gmail.com"
    }
  ],
  "name": "tcomb-react",
  "optionalDependencies": {},
  "readme": "[![build status](https://img.shields.io/travis/gcanti/tcomb-react/master.svg?style=flat-square)](https://travis-ci.org/gcanti/tcomb-react)\n[![dependency status](https://img.shields.io/david/gcanti/tcomb-react.svg?style=flat-square)](https://david-dm.org/gcanti/tcomb-react)\n![npm downloads](https://img.shields.io/npm/dm/tcomb-react.svg)\n\n# Features\n\n- **by default props are required**, a saner default since it's quite easy to forget `.isRequired`\n- **checks for unwanted additional props**\n- **documentation** (types and comments) can be automatically extracted\n- additional fine grained type checks, nestable at arbitrary level\n- builds on [tcomb](https://github.com/gcanti/tcomb), [tcomb-validation](https://github.com/gcanti/tcomb-validation), [tcomb-doc](https://github.com/gcanti/tcomb-doc) libraries\n\n# Compatibility\n\nReact: `^0.13.0`, `^0.14.0`, `^15.0.0`\n\n# Prop types\n\n## The `@props` decorator (ES7)\n\nFor an equivalent implementation in ES5 see the `propTypes` function below.\n\n**Signature**\n\n```js\ntype Props = {[key: string]: TcombType};\n\ntype PropsType = TcombStruct | TcombInterface;\n\ntype Type = Props | PropsType | Refinement<PropsType>;\n\ntype Options = {\n  strict?: boolean // default true\n};\n\n@props(type: Type, options?: Options)\n```\n\nwhere\n\n- `type` can be a map `string -> TcombType`, a `tcomb` struct, a `tcomb` interface, a refinement of a `tcomb` struct, a refinement of a `tcomb` interface\n- `options`:\n  - `strict: boolean` (default `true`) if `true` checks for unwanted additional props\n\n**Example** (ES7)\n\n```js\nimport t from 'tcomb'\nimport { props } from 'tcomb-react'\n\nconst Gender = t.enums.of(['Male', 'Female'], 'Gender')\nconst URL = t.refinement(t.String, (s) => s.startsWith('http'), 'URL')\n\n@props({\n  name: t.String,             // a required string\n  surname: t.maybe(t.String), // an optional string\n  age: t.Number,              // a required number\n  gender: Gender,             // an enum\n  avatar: URL                 // a refinement\n})\nclass Card extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <p>{this.props.name}</p>\n        ...\n      </div>\n    )\n  }\n\n}\n```\n\n**Unwanted additional props**\n\nBy default `tcomb-react` checks for unwanted additional props:\n\n```js\n@props({\n  name: t.String\n})\nclass Person extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <p>{this.props.name}</p>\n      </div>\n    )\n  }\n\n}\n\n...\n\n<Person name=\"Giulio\" surname=\"Canti\" />\n```\n\n**Output**\n\n```\nWarning: Failed propType: [tcomb] Invalid additional prop(s):\n\n[\n  \"surname\"\n]\n\nsupplied to Person.\n```\n\n**Note**. You can **opt-out** passing the `option` argument `{ strict: false }`.\n\n## The `propTypes` function (ES5)\n\n**Signature**\n\nSame as `@props`.\n\n**Example** (ES5)\n\n```js\nvar t = require('tcomb');\nvar propTypes = require('tcomb-react').propTypes;\n\nvar Gender = t.enums.of(['Male', 'Female'], 'Gender');\nvar URL = t.refinement(t.String, function (s) { return s.startsWith('http'); }, 'URL');\n\nvar Card = React.createClass({\n\n  propTypes: propTypes({\n    name: t.String,             // a required string\n    surname: t.maybe(t.String), // an optional string\n    age: t.Number,              // a required number\n    gender: Gender,             // an enum\n    avatar: URL                 // a refinement\n  }),\n\n  render: function () {\n    return (\n      <div>\n        <p>{this.props.name}</p>\n        ...\n      </div>\n    );\n  }\n\n});\n```\n\n## How it works\n\nThe `@props` decorator sets `propTypes` on the target component to use a [custom validator function](https://facebook.github.io/react/docs/reusable-components.html#prop-validation) built around tcomb types for each specified prop.\n\nFor example, the following:\n\n```js\nconst URL = t.refinement(t.String, (s) => s.startsWith('http'), 'URL');\n\n@props({\n  name: t.String,\n  url: URL,\n})\nclass MyComponent extends React.Component {\n  // ...\n}\n```\n\nis roughly equivalent to:\n\n```js\nconst URL = t.refinement(t.String, (s) => s.startsWith('http'), 'URL');\n\nclass MyComponent extends React.Component {\n  // ...\n}\nMyComponent.propTypes = {\n  name: function(props, propName, componentName) {\n    if (!t.validate(props[propName], t.String).isValid()) {\n      return new Error('...');\n    }\n  },\n  url: function(props, propName, componentName) {\n    if (!t.validate(props[propName], URL).isValid()) {\n      return new Error('...');\n    }\n  },\n}\n```\n\n## The babel plugin\n\nUsing [babel-plugin-tcomb](https://github.com/gcanti/babel-plugin-tcomb) you can express `propTypes` as Flow type annotations:\n\n```js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport type { $Refinement } from 'tcomb'\nimport { props } from 'tcomb-react'\n\ntype Gender = 'Male' | 'Female';\n\nconst isUrl = (s) => s.startsWith('http')\ntype URL = string & $Refinement<typeof isUrl>;\n\ntype Props = {\n  name: string,\n  surname: ?string,\n  age: number,\n  gender: Gender,\n  avatar: URL\n};\n\n@props(Props)\nclass Card extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <p>{this.props.name}</p>\n        ...\n      </div>\n    )\n  }\n\n}\n```\n\n# Extract documentation from your components\n\n## The `parse` function\n\nGiven a path to a component file returns a JSON / JavaScript blob containing **props types, default values and comments**.\n\n**Signature**\n\n```js\n(path: string | Array<string>) => Object\n```\n\n**Example**\n\nSource\n\n```js\nimport t from 'tcomb'\nimport { props } from 'tcomb-react'\n\n/**\n * Component description here\n * @param name - name description here\n * @param surname - surname description here\n */\n\n@props({\n  name: t.String,             // a required string\n  surname: t.maybe(t.String)  // an optional string\n})\nexport default class Card extends React.Component {\n\n  static defaultProps = {\n    surname: 'Canti'          // default value for surname prop\n  }\n\n  render() {\n    return (\n      <div>\n        <p>{this.props.name}</p>\n        <p>{this.props.surname}</p>\n      </div>\n    )\n  }\n}\n```\n\nUsage\n\n```js\nimport parse from 'tcomb-react/lib/parse'\nconst json = parse('./components/Card.js')\nconsole.log(JSON.stringify(json, null, 2))\n```\n\nOutput\n\n```json\n{\n  \"name\": \"Card\",\n  \"description\": \"Component description here\",\n  \"props\": {\n    \"name\": {\n      \"kind\": \"irreducible\",\n      \"name\": \"String\",\n      \"required\": true,\n      \"description\": \"name description here\"\n    },\n    \"surname\": {\n      \"kind\": \"irreducible\",\n      \"name\": \"String\",\n      \"required\": false,\n      \"defaultValue\": \"Canti\",\n      \"description\": \"surname description here\"\n    }\n  }\n}\n```\n\n**Note**. Since `parse` uses runtime type introspection, your components should be `require`able from your script (you may be required to shim the browser environment).\n\n**Parsing multiple components**\n\n```js\nimport parse from 'tcomb-react/lib/parse'\nimport path from 'path'\nimport glob from 'glob'\n\nfunction getPath(file) {\n  return path.resolve(process.cwd(), file);\n}\n\nparse(glob.sync('./components/*.js').map(getPath));\n```\n\n## The `toMarkdown` function\n\nGiven a JSON / JavaScript blob returned by `parse` returns a markdown containing the components documentation.\n\n**Signature**\n\n```js\n(json: Object) => string\n```\n\n**Example**\n\nUsage\n\n```js\nimport parse from 'tcomb-react/lib/parse'\nimport toMarkdown from 'tcomb-react/lib/toMarkdown'\nconst json = parse('./components/Card.js')\nconsole.log(toMarkdown(json));\n```\n\nOutput\n\n```markdown\n## Card\n\nComponent description here\n\n**Props**\n\n- `name: String` name description here\n- `surname: String` (optional, default: `\"Canti\"`) surname description here\n\n```\n\n# Augmented pre-defined types\n\n`tcomb-react` exports some useful pre-defined types:\n\n- `ReactElement`\n- `ReactNode`\n- `ReactChild`\n- `ReactChildren`\n\n**Example**\n\n```js\nimport { props, ReactChild } from 'tcomb-react';\n\n@props({\n  children: ReactChild // only one child is allowed\n})\nclass MyComponent extends React.Component {\n\n  render() {\n    return (\n      <div>\n        {this.props.children}\n      </div>\n    );\n  }\n\n}\n```\n\n# Support for babel-plugin-tcomb\n\nThe following types for Flow are exported:\n\n- `ReactElementT`\n- `ReactNodeT`\n- `ReactChildT`\n- `ReactChildrenT`\n\n# Comparison table\n\n| Type | React | tcomb-react |\n|------|-------|-------------|\n| array | array | Array |\n| boolean | bool | Boolean |\n| functions | func | Function |\n| numbers | number | Number |\n| objects | object | Object |\n| strings | string | String |\n| all | any | Any |\n| required prop | T.isRequired | T |\n| optional prop | T | maybe(T) |\n| custom types | ✘ | ✓ |\n| tuples | ✘ | tuple([T, U, ...]) |\n| lists | arrayOf(T) | list(T) |\n| instance | instanceOf(A) | T |\n| dictionaries | objectOf(T) | dict(T, U) (keys are checked) |\n| enums | oneOf(['a', 'b']) | enums.of('a b') |\n| unions | oneOfType([T, U]) | union([T, U]) |\n| duck typing | shape | struct |\n| react element | element | ReactElement |\n| react node | node | ReactNode |\n| react child | ✘ | ReactChild |\n| react children | ✘ | ReactChildren |\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gcanti/tcomb-react.git"
  },
  "scripts": {
    "lint": "eslint index.js lib",
    "test": "mocha --compilers js:babel/register"
  },
  "tags": [
    "tcomb",
    "react",
    "react-component"
  ],
  "version": "0.9.3"
}
